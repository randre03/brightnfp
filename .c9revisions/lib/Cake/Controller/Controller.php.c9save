{"ts":1377221530492,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       Cake.Controller\n * @since         CakePHP(tm) v 0.2.9\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\n\nApp::uses('CakeResponse', 'Network');\nApp::uses('ClassRegistry', 'Utility');\nApp::uses('ComponentCollection', 'Controller');\nApp::uses('View', 'View');\nApp::uses('CakeEvent', 'Event');\nApp::uses('CakeEventListener', 'Event');\nApp::uses('CakeEventManager', 'Event');\n\n/**\n * Application controller class for organization of business logic.\n * Provides basic functionality, such as rendering views inside layouts,\n * automatic model availability, redirection, callbacks, and more.\n *\n * Controllers should provide a number of 'action' methods. These are public methods on the controller\n * that are not prefixed with a '_' and not part of Controller. Each action serves as an endpoint for\n * performing a specific action on a resource or collection of resources. For example adding or editing a new\n * object, or listing a set of objects.\n *\n * You can access request parameters, using `$this->request`. The request object contains all the POST, GET and FILES\n * that were part of the request.\n *\n * After performing the required actions, controllers are responsible for creating a response. This usually\n * takes the form of a generated View, or possibly a redirection to another controller action. In either case\n * `$this->response` allows you to manipulate all aspects of the response.\n *\n * Controllers are created by Dispatcher based on request parameters and routing. By default controllers and actions\n * use conventional names. For example `/posts/index` maps to `PostsController::index()`. You can re-map URLs\n * using Router::connect().\n *\n * @package       Cake.Controller\n * @property      AclComponent $Acl\n * @property      AuthComponent $Auth\n * @property      CookieComponent $Cookie\n * @property      EmailComponent $Email\n * @property      PaginatorComponent $Paginator\n * @property      RequestHandlerComponent $RequestHandler\n * @property      SecurityComponent $Security\n * @property      SessionComponent $Session\n * @link          http://book.cakephp.org/2.0/en/controllers.html\n */\nclass Controller extends Object implements CakeEventListener {\n\n/**\n * The name of this controller. Controller names are plural, named after the model they manipulate.\n *\n * @var string\n * @link http://book.cakephp.org/2.0/en/controllers.html#controller-attributes\n */\n\tpublic $name = null;\n\n/**\n * An array containing the class names of models this controller uses.\n *\n * Example: `public $uses = array('Product', 'Post', 'Comment');`\n *\n * Can be set to several values to express different options:\n *\n * - `true` Use the default inflected model name.\n * - `array()` Use only models defined in the parent class.\n * - `false` Use no models at all, do not merge with parent class either.\n * - `array('Post', 'Comment')` Use only the Post and Comment models. Models\n *   Will also be merged with the parent class.\n *\n * The default value is `true`.\n *\n * @var mixed A single name as a string or a list of names as an array.\n * @link http://book.cakephp.org/2.0/en/controllers.html#components-helpers-and-uses\n */\n\tpublic $uses = true;\n\n/**\n * An array containing the names of helpers this controller uses. The array elements should\n * not contain the \"Helper\" part of the classname.\n *\n * Example: `public $helpers = array('Html', 'Javascript', 'Time', 'Ajax');`\n *\n * @var mixed A single name as a string or a list of names as an array.\n * @link http://book.cakephp.org/2.0/en/controllers.html#components-helpers-and-uses\n */\n\tpublic $helpers = array();\n\n/**\n * An instance of a CakeRequest object that contains information about the current request.\n * This object contains all the information about a request and several methods for reading\n * additional information about the request.\n *\n * @var CakeRequest\n * @link http://book.cakephp.org/2.0/en/controllers/request-response.html#cakerequest\n */\n\tpublic $request;\n\n/**\n * An instance of a CakeResponse object that contains information about the impending response\n *\n * @var CakeResponse\n * @link http://book.cakephp.org/2.0/en/controllers/request-response.html#cakeresponse\n */\n\tpublic $response;\n\n/**\n * The classname to use for creating the response object.\n *\n * @var string\n */\n\tprotected $_responseClass = 'CakeResponse';\n\n/**\n * The name of the views subfolder containing views for this controller.\n *\n * @var string\n */\n\tpublic $viewPath = null;\n\n/**\n * The name of the layouts subfolder containing layouts for this controller.\n *\n * @var string\n */\n\tpublic $layoutPath = null;\n\n/**\n * Contains variables to be handed to the view.\n *\n * @var array\n */\n\tpublic $viewVars = array();\n\n/**\n * The name of the view file to render. The name specified\n * is the filename in /app/View/<SubFolder> without the .ctp extension.\n *\n * @var string\n */\n\tpublic $view = null;\n\n/**\n * The name of the layout file to render the view inside of. The name specified\n * is the filename of the layout in /app/View/Layouts without the .ctp\n * extension.\n *\n * @var string\n */\n\tpublic $layout = 'default';\n\n/**\n * Set to true to automatically render the view\n * after action logic.\n *\n * @var boolean\n */\n\tpublic $autoRender = true;\n\n/**\n * Set to true to automatically render the layout around views.\n *\n * @var boolean\n */\n\tpublic $autoLayout = true;\n\n/**\n * Instance of ComponentCollection used to handle callbacks.\n *\n * @var ComponentCollection\n */\n\tpublic $Components = null;\n\n/**\n * Array containing the names of components this controller uses. Component names\n * should not contain the \"Component\" portion of the classname.\n *\n * Example: `public $components = array('Session', 'RequestHandler', 'Acl');`\n *\n * @var array\n * @link http://book.cakephp.org/2.0/en/controllers/components.html\n */\n\tpublic $components = array('Session');\n\n/**\n * The name of the View class this controller sends output to.\n *\n * @var string\n */\n\tpublic $viewClass = 'View';\n\n/**\n * Instance of the View created during rendering. Won't be set until after\n * Controller::render() is called.\n *\n * @var View\n */\n\tpublic $View;\n\n/**\n * File extension for view templates. Defaults to Cake's conventional \".ctp\".\n *\n * @var string\n */\n\tpublic $ext = '.ctp';\n\n/**\n * Automatically set to the name of a plugin.\n *\n * @var string\n */\n\tpublic $plugin = null;\n\n/**\n * Used to define methods a controller that will be cached. To cache a\n * single action, the value is set to an array containing keys that match\n * action names and values that denote cache expiration times (in seconds).\n *\n * Example:\n *\n * {{{\n * public $cacheAction = array(\n *\t\t'view/23/' => 21600,\n *\t\t'recalled/' => 86400\n *\t);\n * }}}\n *\n * $cacheAction can also be set to a strtotime() compatible string. This\n * marks all the actions in the controller for view caching.\n *\n * @var mixed\n * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/cache.html#additional-configuration-options\n */\n\tpublic $cacheAction = false;\n\n/**\n * Holds all params passed and named.\n *\n * @var mixed\n */\n\tpublic $passedArgs = array();\n\n/**\n * Triggers Scaffolding\n *\n * @var mixed\n * @link http://book.cakephp.org/2.0/en/controllers/scaffolding.html\n */\n\tpublic $scaffold = false;\n\n/**\n * Holds current methods of the controller. This is a list of all the methods reachable\n * via URL. Modifying this array, will allow you to change which methods can be reached.\n *\n * @var array\n */\n\tpublic $methods = array();\n\n/**\n * This controller's primary model class name, the Inflector::singularize()'ed version of\n * the controller's $name property.\n *\n * Example: For a controller named 'Comments', the modelClass would be 'Comment'\n *\n * @var string\n */\n\tpublic $modelClass = null;\n\n/**\n * This controller's model key name, an underscored version of the controller's $modelClass property.\n *\n * Example: For a controller named 'ArticleComments', the modelKey would be 'article_comment'\n *\n * @var string\n */\n\tpublic $modelKey = null;\n\n/**\n * Holds any validation errors produced by the last call of the validateErrors() method/\n *\n * @var array Validation errors, or false if none\n */\n\tpublic $validationErrors = null;\n\n/**\n * The class name of the parent class you wish to merge with.\n * Typically this is AppController, but you may wish to merge vars with a different\n * parent class.\n *\n * @var string\n */\n\tprotected $_mergeParent = 'AppController';\n\n/**\n * Instance of the CakeEventManager this controller is using\n * to dispatch inner events.\n *\n * @var CakeEventManager\n */\n\tprotected $_eventManager = null;\n\n/**\n * Constructor.\n *\n * @param CakeRequest $request Request object for this controller. Can be null for testing,\n *  but expect that features that use the request parameters will not work.\n * @param CakeResponse $response Response object for this controller.\n */\n\tpublic function __construct($request = null, $response = null) {\n\t\tif ($this->name === null) {\n\t\t\t$this->name = substr(get_class($this), 0, -10);\n\t\t}\n\n\t\tif (!$this->viewPath) {\n\t\t\t$this->viewPath = $this->name;\n\t\t}\n\n\t\t$this->modelClass = Inflector::singularize($this->name);\n\t\t$this->modelKey = Inflector::underscore($this->modelClass);\n\t\t$this->Components = new ComponentCollection();\n\n\t\t$childMethods = get_class_methods($this);\n\t\t$parentMethods = get_class_methods('Controller');\n\n\t\t$this->methods = array_diff($childMethods, $parentMethods);\n\n\t\tif ($request instanceof CakeRequest) {\n\t\t\t$this->setRequest($request);\n\t\t}\n\t\tif ($response instanceof CakeResponse) {\n\t\t\t$this->response = $response;\n\t\t}\n\t\tparent::__construct();\n\t}\n\n/**\n * Provides backwards compatibility to avoid problems with empty and isset to alias properties.\n * Lazy loads models using the loadModel() method if declared in $uses\n *\n * @param string $name\n * @return void\n */\n\tpublic function __isset($name) {\n\t\tswitch ($name) {\n\t\t\tcase 'base':\n\t\t\tcase 'here':\n\t\t\tcase 'webroot':\n\t\t\tcase 'data':\n\t\t\tcase 'action':\n\t\t\tcase 'params':\n\t\t\t\treturn true;\n\t\t}\n\n\t\tif (is_array($this->uses)) {\n\t\t\tforeach ($this->uses as $modelClass) {\n\t\t\t\tlist($plugin, $class) = pluginSplit($modelClass, true);\n\t\t\t\tif ($name === $class) {\n\t\t\t\t\treturn $this->loadModel($modelClass);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($name === $this->modelClass) {\n\t\t\tlist($plugin, $class) = pluginSplit($name, true);\n\t\t\tif (!$plugin) {\n\t\t\t\t$plugin = $this->plugin ? $this->plugin . '.' : null;\n\t\t\t}\n\t\t\treturn $this->loadModel($plugin . $this->modelClass);\n\t\t}\n\n\t\treturn false;\n\t}\n\n/**\n * Provides backwards compatibility access to the request object properties.\n * Also provides the params alias.\n *\n * @param string $name\n * @return void\n */\n\tpublic function __get($name) {\n\t\tswitch ($name) {\n\t\t\tcase 'base':\n\t\t\tcase 'here':\n\t\t\tcase 'webroot':\n\t\t\tcase 'data':\n\t\t\t\treturn $this->request->{$name};\n\t\t\tcase 'action':\n\t\t\t\treturn isset($this->request->params['action']) ? $this->request->params['action'] : '';\n\t\t\tcase 'params':\n\t\t\t\treturn $this->request;\n\t\t\tcase 'paginate':\n\t\t\t\treturn $this->Components->load('Paginator')->settings;\n\t\t}\n\n\t\tif (isset($this->{$name})) {\n\t\t\treturn $this->{$name};\n\t\t}\n\n\t\treturn null;\n\t}\n\n/**\n * Provides backwards compatibility access for setting values to the request object.\n *\n * @param string $name\n * @param mixed $value\n * @return void\n */\n\tpublic function __set($name, $value) {\n\t\tswitch ($name) {\n\t\t\tcase 'base':\n\t\t\tcase 'here':\n\t\t\tcase 'webroot':\n\t\t\tcase 'data':\n\t\t\t\treturn $this->request->{$name} = $value;\n\t\t\tcase 'action':\n\t\t\t\treturn $this->request->params['action'] = $value;\n\t\t\tcase 'params':\n\t\t\t\treturn $this->request->params = $value;\n\t\t\tcase 'paginate':\n\t\t\t\treturn $this->Components->load('Paginator')->settings = $value;\n\t\t}\n\t\treturn $this->{$name} = $value;\n\t}\n\n/**\n * Sets the request objects and configures a number of controller properties\n * based on the contents of the request. The properties that get set are\n *\n * - $this->request - To the $request parameter\n * - $this->plugin - To the $request->params['plugin']\n * - $this->view - To the $request->params['action']\n * - $this->autoLayout - To the false if $request->params['bare']; is set.\n * - $this->autoRender - To false if $request->params['return'] == 1\n * - $this->passedArgs - The the combined results of params['named'] and params['pass]\n *\n * @param CakeRequest $request\n * @return void\n */\n\tpublic function setRequest(CakeRequest $request) {\n\t\t$this->request = $request;\n\t\t$this->plugin = isset($request->params['plugin']) ? Inflector::camelize($request->params['plugin']) : null;\n\t\t$this->view = isset($request->params['action']) ? $request->params['action'] : null;\n\t\tif (isset($request->params['pass']) && isset($request->params['named'])) {\n\t\t\t$this->passedArgs = array_merge($request->params['pass'], $request->params['named']);\n\t\t}\n\n\t\tif (!empty($request->params['return']) && $request->params['return'] == 1) {\n\t\t\t$this->autoRender = false;\n\t\t}\n\t\tif (!empty($request->params['bare'])) {\n\t\t\t$this->autoLayout = false;\n\t\t}\n\t}\n\n/**\n * Dispatches the controller action. Checks that the action\n * exists and isn't private.\n *\n * @param CakeRequest $request\n * @return mixed The resulting response.\n * @throws PrivateActionException When actions are not public or prefixed by _\n * @throws MissingActionException When actions are not defined and scaffolding is\n *    not enabled.\n */\n\tpublic function invokeAction(CakeRequest $request) {\n\t\ttry {\n\t\t\t$method = new ReflectionMethod($this, $request->params['action']);\n\n\t\t\tif ($this->_isPrivateAction($method, $request)) {\n\t\t\t\tthrow new PrivateActionException(array(\n\t\t\t\t\t'controller' => $this->name . \"Controller\",\n\t\t\t\t\t'action' => $request->params['action']\n\t\t\t\t));\n\t\t\t}\n\t\t\treturn $method->invokeArgs($this, $request->params['pass']);\n\n\t\t} catch (ReflectionException $e) {\n\t\t\tif ($this->scaffold !== false) {\n\t\t\t\treturn $this->_getScaffold($request);\n\t\t\t}\n\t\t\tthrow new MissingActionException(array(\n\t\t\t\t'controller' => $this->name . \"Controller\",\n\t\t\t\t'action' => $request->params['action']\n\t\t\t));\n\t\t}\n\t}\n\n/**\n * Check if the request's action is marked as private, with an underscore,\n * or if the request is attempting to directly accessing a prefixed action.\n *\n * @param ReflectionMethod $method The method to be invoked.\n * @param CakeRequest $request The request to check.\n * @return boolean\n */\n\tprotected function _isPrivateAction(ReflectionMethod $method, CakeRequest $request) {\n\t\t$privateAction = (\n\t\t\t$method->name[0] === '_' ||\n\t\t\t!$method->isPublic() ||\n\t\t\t!in_array($method->name, $this->methods)\n\t\t);\n\t\t$prefixes = Router::prefixes();\n\n\t\tif (!$privateAction && !empty($prefixes)) {\n\t\t\tif (empty($request->params['prefix']) && strpos($request->params['action'], '_') > 0) {\n\t\t\t\tlist($prefix) = explode('_', $request->params['action']);\n\t\t\t\t$privateAction = in_array($prefix, $prefixes);\n\t\t\t}\n\t\t}\n\t\treturn $privateAction;\n\t}\n\n/**\n * Returns a scaffold object to use for dynamically scaffolded controllers.\n *\n * @param CakeRequest $request\n * @return Scaffold\n */\n\tprotected function _getScaffold(CakeRequest $request) {\n\t\treturn new Scaffold($this, $request);\n\t}\n\n/**\n * Merge components, helpers, and uses vars from\n * Controller::$_mergeParent and PluginAppController.\n *\n * @return void\n */\n\tprotected function _mergeControllerVars() {\n\t\t$pluginController = $pluginDot = null;\n\t\t$mergeParent = is_subclass_of($this, $this->_mergeParent);\n\t\t$pluginVars = array();\n\t\t$appVars = array();\n\n\t\tif (!empty($this->plugin)) {\n\t\t\t$pluginController = $this->plugin . 'AppController';\n\t\t\tif (!is_subclass_of($this, $pluginController)) {\n\t\t\t\t$pluginController = null;\n\t\t\t}\n\t\t\t$pluginDot = $this->plugin . '.';\n\t\t}\n\n\t\tif ($pluginController) {\n\t\t\t$merge = array('components', 'helpers');\n\t\t\t$this->_mergeVars($merge, $pluginController);\n\t\t}\n\n\t\tif ($mergeParent || !empty($pluginController)) {\n\t\t\t$appVars = get_class_vars($this->_mergeParent);\n\t\t\t$merge = array('components', 'helpers');\n\t\t\t$this->_mergeVars($merge, $this->_mergeParent, true);\n\t\t}\n\n\t\tif ($this->uses === null) {\n\t\t\t$this->uses = false;\n\t\t}\n\t\tif ($this->uses === true) {\n\t\t\t$this->uses = array($pluginDot . $this->modelClass);\n\t\t}\n\t\tif (isset($appVars['uses']) && $appVars['uses'] === $this->uses) {\n\t\t\tarray_unshift($this->uses, $pluginDot . $this->modelClass);\n\t\t}\n\t\tif ($pluginController) {\n\t\t\t$pluginVars = get_class_vars($pluginController);\n\t\t}\n\t\tif ($this->uses !== false) {\n\t\t\t$this->_mergeUses($pluginVars);\n\t\t\t$this->_mergeUses($appVars);\n\t\t} else {\n\t\t\t$this->uses = array();\n\t\t\t$this->modelClass = '';\n\t\t}\n\t}\n\n/**\n * Helper method for merging the $uses property together.\n *\n * Merges the elements not already in $this->uses into\n * $this->uses.\n *\n * @param array $merge The data to merge in.\n * @return void\n */\n\tprotected function _mergeUses($merge) {\n\t\tif (!isset($merge['uses'])) {\n\t\t\treturn;\n\t\t}\n\t\tif ($merge['uses'] === true) {\n\t\t\treturn;\n\t\t}\n\t\t$this->uses = array_merge(\n\t\t\t$this->uses,\n\t\t\tarray_diff($merge['uses'], $this->uses)\n\t\t);\n\t}\n\n/**\n * Returns a list of all events that will fire in the controller during it's lifecycle.\n * You can override this function to add you own listener callbacks\n *\n * @return array\n */\n\tpublic function implementedEvents() {\n\t\treturn array(\n\t\t\t'Controller.initialize' => 'beforeFilter',\n\t\t\t'Controller.beforeRender' => 'beforeRender',\n\t\t\t'Controller.beforeRedirect' => array('callable' => 'beforeRedirect', 'passParams' => true),\n\t\t\t'Controller.shutdown' => 'afterFilter'\n\t\t);\n\t}\n\n/**\n * Loads Model classes based on the uses property\n * see Controller::loadModel(); for more info.\n * Loads Components and prepares them for initialization.\n *\n * @return mixed true if models found and instance created.\n * @see Controller::loadModel()\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::constructClasses\n * @throws MissingModelException\n */\n\tpublic function constructClasses() {\n\t\t$this->_mergeControllerVars();\n\t\tif ($this->uses) {\n\t\t\t$this->uses = (array)$this->uses;\n\t\t\tlist(, $this->modelClass) = pluginSplit(reset($this->uses));\n\t\t}\n\t\t$this->Components->init($this);\n\t\treturn true;\n\t}\n\n/**\n * Returns the CakeEventManager manager instance that is handling any callbacks.\n * You can use this instance to register any new listeners or callbacks to the\n * controller events, or create your own events and trigger them at will.\n *\n * @return CakeEventManager\n */\n\tpublic function getEventManager() {\n\t\tif (empty($this->_eventManager)) {\n\t\t\t$this->_eventManager = new CakeEventManager();\n\t\t\t$this->_eventManager->attach($this->Components);\n\t\t\t$this->_eventManager->attach($this);\n\t\t}\n\t\treturn $this->_eventManager;\n\t}\n\n/**\n * Perform the startup process for this controller.\n * Fire the Components and Controller callbacks in the correct order.\n *\n * - Initializes components, which fires their `initialize` callback\n * - Calls the controller `beforeFilter`.\n * - triggers Component `startup` methods.\n *\n * @return void\n */\n\tpublic function startupProcess() {\n\t\t$this->getEventManager()->dispatch(new CakeEvent('Controller.initialize', $this));\n\t\t$this->getEventManager()->dispatch(new CakeEvent('Controller.startup', $this));\n\t}\n\n/**\n * Perform the various shutdown processes for this controller.\n * Fire the Components and Controller callbacks in the correct order.\n *\n * - triggers the component `shutdown` callback.\n * - calls the Controller's `afterFilter` method.\n *\n * @return void\n */\n\tpublic function shutdownProcess() {\n\t\t$this->getEventManager()->dispatch(new CakeEvent('Controller.shutdown', $this));\n\t}\n\n/**\n * Queries & sets valid HTTP response codes & messages.\n *\n * @param integer|array $code If $code is an integer, then the corresponding code/message is\n *        returned if it exists, null if it does not exist. If $code is an array,\n *        then the 'code' and 'message' keys of each nested array are added to the default\n *        HTTP codes. Example:\n *\n *        httpCodes(404); // returns array(404 => 'Not Found')\n *\n *        httpCodes(array(\n *            701 => 'Unicorn Moved',\n *            800 => 'Unexpected Minotaur'\n *        )); // sets these new values, and returns true\n *\n * @return array Associative array of the HTTP codes as keys, and the message\n *    strings as values, or null of the given $code does not exist.\n * @deprecated Use CakeResponse::httpCodes();\n */\n\tpublic function httpCodes($code = null) {\n\t\treturn $this->response->httpCodes($code);\n\t}\n\n/**\n * Loads and instantiates models required by this controller.\n * If the model is non existent, it will throw a missing database table error, as Cake generates\n * dynamic models for the time being.\n *\n * @param string $modelClass Name of model class to load\n * @param integer|string $id Initial ID the instanced model class should have\n * @return mixed true when single model found and instance created, error returned if model not found.\n * @throws MissingModelException if the model class cannot be found.\n */\n\tpublic function loadModel($modelClass = null, $id = null) {\n\t\tif ($modelClass === null) {\n\t\t\t$modelClass = $this->modelClass;\n\t\t}\n\n\t\t$this->uses = ($this->uses) ? (array)$this->uses : array();\n\t\tif (!in_array($modelClass, $this->uses, true)) {\n\t\t\t$this->uses[] = $modelClass;\n\t\t}\n\n\t\tlist($plugin, $modelClass) = pluginSplit($modelClass, true);\n\n\t\t$this->{$modelClass} = ClassRegistry::init(array(\n\t\t\t'class' => $plugin . $modelClass, 'alias' => $modelClass, 'id' => $id\n\t\t));\n\t\tif (!$this->{$modelClass}) {\n\t\t\tthrow new MissingModelException($modelClass);\n\t\t}\n\t\treturn true;\n\t}\n\n/**\n * Redirects to given $url, after turning off $this->autoRender.\n * Script execution is halted after the redirect.\n *\n * @param string|array $url A string or array-based URL pointing to another location within the app,\n *     or an absolute URL\n * @param integer $status Optional HTTP status code (eg: 404)\n * @param boolean $exit If true, exit() will be called after the redirect\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::redirect\n */\n\tpublic function redirect($url, $status = null, $exit = true) {\n\t\t$this->autoRender = false;\n\n\t\tif (is_array($status)) {\n\t\t\textract($status, EXTR_OVERWRITE);\n\t\t}\n\t\t$event = new CakeEvent('Controller.beforeRedirect', $this, array($url, $status, $exit));\n\n\t\tlist($event->break, $event->breakOn, $event->collectReturn) = array(true, false, true);\n\t\t$this->getEventManager()->dispatch($event);\n\n\t\tif ($event->isStopped()) {\n\t\t\treturn;\n\t\t}\n\t\t$response = $event->result;\n\t\textract($this->_parseBeforeRedirect($response, $url, $status, $exit), EXTR_OVERWRITE);\n\n\t\tif ($url !== null) {\n\t\t\t$this->response->header('Location', Router::url($url, true));\n\t\t}\n\n\t\tif (is_string($status)) {\n\t\t\t$codes = array_flip($this->response->httpCodes());\n\t\t\tif (isset($codes[$status])) {\n\t\t\t\t$status = $codes[$status];\n\t\t\t}\n\t\t}\n\n\t\tif ($status) {\n\t\t\t$this->response->statusCode($status);\n\t\t}\n\n\t\tif ($exit) {\n\t\t\t$this->response->send();\n\t\t\t$this->_stop();\n\t\t}\n\t}\n\n/**\n * Parse beforeRedirect Response\n *\n * @param mixed $response Response from beforeRedirect callback\n * @param string|array $url The same value of beforeRedirect\n * @param integer $status The same value of beforeRedirect\n * @param boolean $exit The same value of beforeRedirect\n * @return array Array with keys url, status and exit\n */\n\tprotected function _parseBeforeRedirect($response, $url, $status, $exit) {\n\t\tif (is_array($response) && array_key_exists(0, $response)) {\n\t\t\tforeach ($response as $resp) {\n\t\t\t\tif (is_array($resp) && isset($resp['url'])) {\n\t\t\t\t\textract($resp, EXTR_OVERWRITE);\n\t\t\t\t} elseif ($resp !== null) {\n\t\t\t\t\t$url = $resp;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (is_array($response)) {\n\t\t\textract($response, EXTR_OVERWRITE);\n\t\t}\n\t\treturn compact('url', 'status', 'exit');\n\t}\n\n/**\n * Convenience and object wrapper method for CakeResponse::header().\n *\n * @param string $status The header message that is being set.\n * @return void\n * @deprecated Use CakeResponse::header()\n */\n\tpublic function header($status) {\n\t\t$this->response->header($status);\n\t}\n\n/**\n * Saves a variable for use inside a view template.\n *\n * @param string|array $one A string or an array of data.\n * @param string|array $two Value in case $one is a string (which then works as the key).\n *   Unused if $one is an associative array, otherwise serves as the values to $one's keys.\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#interacting-with-views\n */\n\tpublic function set($one, $two = null) {\n\t\tif (is_array($one)) {\n\t\t\tif (is_array($two)) {\n\t\t\t\t$data = array_combine($one, $two);\n\t\t\t} else {\n\t\t\t\t$data = $one;\n\t\t\t}\n\t\t} else {\n\t\t\t$data = array($one => $two);\n\t\t}\n\t\t$this->viewVars = $data + $this->viewVars;\n\t}\n\n/**\n * Internally redirects one action to another. Does not perform another HTTP request unlike Controller::redirect()\n *\n * Examples:\n *\n * {{{\n * setAction('another_action');\n * setAction('action_with_parameters', $parameter1);\n * }}}\n *\n * @param string $action The new action to be 'redirected' to.\n *   Any other parameters passed to this method will be passed as parameters to the new action.\n * @return mixed Returns the return value of the called action\n */\n\tpublic function setAction($action) {\n\t\t$this->request->params['action'] = $action;\n\t\t$this->view = $action;\n\t\t$args = func_get_args();\n\t\tunset($args[0]);\n\t\treturn call_user_func_array(array(&$this, $action), $args);\n\t}\n\n/**\n * Returns number of errors in a submitted FORM.\n *\n * @return integer Number of errors\n */\n\tpublic function validate() {\n\t\t$args = func_get_args();\n\t\t$errors = call_user_func_array(array(&$this, 'validateErrors'), $args);\n\n\t\tif ($errors === false) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn count($errors);\n\t}\n\n/**\n * Validates models passed by parameters. Example:\n *\n * `$errors = $this->validateErrors($this->Article, $this->User);`\n *\n * @param mixed A list of models as a variable argument\n * @return array Validation errors, or false if none\n */\n\tpublic function validateErrors() {\n\t\t$objects = func_get_args();\n\n\t\tif (empty($objects)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$errors = array();\n\t\tforeach ($objects as $object) {\n\t\t\tif (isset($this->{$object->alias})) {\n\t\t\t\t$object = $this->{$object->alias};\n\t\t\t}\n\t\t\t$object->set($object->data);\n\t\t\t$errors = array_merge($errors, $object->invalidFields());\n\t\t}\n\n\t\treturn $this->validationErrors = (!empty($errors) ? $errors : false);\n\t}\n\n/**\n * Instantiates the correct view class, hands it its data, and uses it to render the view output.\n *\n * @param string $view View to use for rendering\n * @param string $layout Layout to use\n * @return CakeResponse A response object containing the rendered view.\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::render\n */\n\tpublic function render($view = null, $layout = null) {\n\t\t$event = new CakeEvent('Controller.beforeRender', $this);\n\t\t$this->getEventManager()->dispatch($event);\n\t\tif ($event->isStopped()) {\n\t\t\t$this->autoRender = false;\n\t\t\treturn $this->response;\n\t\t}\n\n\t\tif (!empty($this->uses) && is_array($this->uses)) {\n\t\t\tforeach ($this->uses as $model) {\n\t\t\t\tlist($plugin, $className) = pluginSplit($model);\n\t\t\t\t$this->request->params['models'][$className] = compact('plugin', 'className');\n\t\t\t}\n\t\t}\n\n\t\t$this->View = $this->_getViewObject();\n\n\t\t$models = ClassRegistry::keys();\n\t\tforeach ($models as $currentModel) {\n\t\t\t$currentObject = ClassRegistry::getObject($currentModel);\n\t\t\tif (is_a($currentObject, 'Model')) {\n\t\t\t\t$className = get_class($currentObject);\n\t\t\t\tlist($plugin) = pluginSplit(App::location($className));\n\t\t\t\t$this->request->params['models'][$currentObject->alias] = compact('plugin', 'className');\n\t\t\t\t$this->View->validationErrors[$currentObject->alias] =& $currentObject->validationErrors;\n\t\t\t}\n\t\t}\n\n\t\t$this->autoRender = false;\n\t\t$this->response->body($this->View->render($view, $layout));\n\t\treturn $this->response;\n\t}\n\n/**\n * Returns the referring URL for this request.\n *\n * @param string $default Default URL to use if HTTP_REFERER cannot be read from headers\n * @param boolean $local If true, restrict referring URLs to local server\n * @return string Referring URL\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::referer\n */\n\tpublic function referer($default = null, $local = false) {\n\t\tif (!$this->request) {\n\t\t\treturn '/';\n\t\t}\n\n\t\t$referer = $this->request->referer($local);\n\t\tif ($referer === '/' && $default) {\n\t\t\treturn Router::url($default, true);\n\t\t}\n\t\treturn $referer;\n\t}\n\n/**\n * Forces the user's browser not to cache the results of the current request.\n *\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::disableCache\n * @deprecated Use CakeResponse::disableCache()\n */\n\tpublic function disableCache() {\n\t\t$this->response->disableCache();\n\t}\n\n/**\n * Shows a message to the user for $pause seconds, then redirects to $url.\n * Uses flash.ctp as the default layout for the message.\n * Does not work if the current debug level is higher than 0.\n *\n * @param string $message Message to display to the user\n * @param string|array $url Relative string or array-based URL to redirect to after the time expires\n * @param integer $pause Time to show the message\n * @param string $layout Layout you want to use, defaults to 'flash'\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::flash\n */\n\tpublic function flash($message, $url, $pause = 1, $layout = 'flash') {\n\t\t$this->autoRender = false;\n\t\t$this->set('url', Router::url($url));\n\t\t$this->set('message', $message);\n\t\t$this->set('pause', $pause);\n\t\t$this->set('page_title', $message);\n\t\t$this->render(false, $layout);\n\t}\n\n/**\n * Converts POST'ed form data to a model conditions array, suitable for use in a Model::find() call.\n *\n * @param array $data POST'ed data organized by model and field\n * @param string|array $op A string containing an SQL comparison operator, or an array matching operators\n *        to fields\n * @param string $bool SQL boolean operator: AND, OR, XOR, etc.\n * @param boolean $exclusive If true, and $op is an array, fields not included in $op will not be\n *        included in the returned conditions\n * @return array An array of model conditions\n * @deprecated Will be removed in 3.0\n */\n\tpublic function postConditions($data = array(), $op = null, $bool = 'AND', $exclusive = false) {\n\t\tif (!is_array($data) || empty($data)) {\n\t\t\tif (!empty($this->request->data)) {\n\t\t\t\t$data = $this->request->data;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t$cond = array();\n\n\t\tif ($op === null) {\n\t\t\t$op = '';\n\t\t}\n\n\t\t$arrayOp = is_array($op);\n\t\tforeach ($data as $model => $fields) {\n\t\t\tforeach ($fields as $field => $value) {\n\t\t\t\t$key = $model . '.' . $field;\n\t\t\t\t$fieldOp = $op;\n\t\t\t\tif ($arrayOp) {\n\t\t\t\t\tif (array_key_exists($key, $op)) {\n\t\t\t\t\t\t$fieldOp = $op[$key];\n\t\t\t\t\t} elseif (array_key_exists($field, $op)) {\n\t\t\t\t\t\t$fieldOp = $op[$field];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fieldOp = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($exclusive && $fieldOp === false) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$fieldOp = strtoupper(trim($fieldOp));\n\t\t\t\tif ($fieldOp === 'LIKE') {\n\t\t\t\t\t$key = $key . ' LIKE';\n\t\t\t\t\t$value = '%' . $value . '%';\n\t\t\t\t} elseif ($fieldOp && $fieldOp !== '=') {\n\t\t\t\t\t$key = $key . ' ' . $fieldOp;\n\t\t\t\t}\n\t\t\t\t$cond[$key] = $value;\n\t\t\t}\n\t\t}\n\t\tif ($bool && strtoupper($bool) !== 'AND') {\n\t\t\t$cond = array($bool => $cond);\n\t\t}\n\t\treturn $cond;\n\t}\n\n/**\n * Handles automatic pagination of model records.\n *\n * @param Model|string $object Model to paginate (e.g: model instance, or 'Model', or 'Model.InnerModel')\n * @param string|array $scope Conditions to use while paginating\n * @param array $whitelist List of allowed options for paging\n * @return array Model query results\n * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::paginate\n * @deprecated Use PaginatorComponent instead\n */\n\tpublic function paginate($object = null, $scope = array(), $whitelist = array()) {\n\t\treturn $this->Components->load('Paginator', $this->paginate)->paginate($object, $scope, $whitelist);\n\t}\n\n/**\n * Called before the controller action. You can use this method to configure and customize components\n * or perform logic that needs to happen before each controller action.\n *\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks\n */\n\tpublic function beforeFilter() {\n\t}\n\n/**\n * Called after the controller action is run, but before the view is rendered. You can use this method\n * to perform logic or set view variables that are required on every request.\n *\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks\n */\n\tpublic function beforeRender() {\n\t}\n\n/**\n * The beforeRedirect method is invoked when the controller's redirect method is called but before any\n * further action.\n *\n * If this method returns false the controller will not continue on to redirect the request.\n * The $url, $status and $exit variables have same meaning as for the controller's method. You can also\n * return a string which will be interpreted as the url to redirect to or return associative array with\n * key 'url' and optionally 'status' and 'exit'.\n *\n * @param string|array $url A string or array-based URL pointing to another location within the app,\n *     or an absolute URL\n * @param integer $status Optional HTTP status code (eg: 404)\n * @param boolean $exit If true, exit() will be called after the redirect\n * @return mixed\n *   false to stop redirection event,\n *   string controllers a new redirection url or\n *   array with the keys url, status and exit to be used by the redirect method.\n * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks\n */\n\tpublic function beforeRedirect($url, $status = null, $exit = true) {\n\t}\n\n/**\n * Called after the controller action is run and rendered.\n *\n * @return void\n * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks\n */\n\tpublic function afterFilter() {\n\t}\n\n/**\n * This method should be overridden in child classes.\n *\n * @param string $method name of method called example index, edit, etc.\n * @return boolean Success\n * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks\n */\n\tpublic function beforeScaffold($method) {\n\t\treturn true;\n\t}\n\n/**\n * Alias to beforeScaffold()\n *\n * @param string $method\n * @return boolean\n * @see Controller::beforeScaffold()\n * @deprecated\n */\n\tprotected function _beforeScaffold($method) {\n\t\treturn $this->beforeScaffold($method);\n\t}\n\n/**\n * This method should be overridden in child classes.\n *\n * @param string $method name of method called either edit or update.\n * @return boolean Success\n * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks\n */\n\tpublic function afterScaffoldSave($method) {\n\t\treturn true;\n\t}\n\n/**\n * Alias to afterScaffoldSave()\n *\n * @param string $method\n * @return boolean\n * @see Controller::afterScaffoldSave()\n * @deprecated\n */\n\tprotected function _afterScaffoldSave($method) {\n\t\treturn $this->afterScaffoldSave($method);\n\t}\n\n/**\n * This method should be overridden in child classes.\n *\n * @param string $method name of method called either edit or update.\n * @return boolean Success\n * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks\n */\n\tpublic function afterScaffoldSaveError($method) {\n\t\treturn true;\n\t}\n\n/**\n * Alias to afterScaffoldSaveError()\n *\n * @param string $method\n * @return boolean\n * @see Controller::afterScaffoldSaveError()\n * @deprecated\n */\n\tprotected function _afterScaffoldSaveError($method) {\n\t\treturn $this->afterScaffoldSaveError($method);\n\t}\n\n/**\n * This method should be overridden in child classes.\n * If not it will render a scaffold error.\n * Method MUST return true in child classes\n *\n * @param string $method name of method called example index, edit, etc.\n * @return boolean Success\n * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks\n */\n\tpublic function scaffoldError($method) {\n\t\treturn false;\n\t}\n\n/**\n * Alias to scaffoldError()\n *\n * @param string $method\n * @return boolean\n * @see Controller::scaffoldError()\n * @deprecated\n */\n\tprotected function _scaffoldError($method) {\n\t\treturn $this->scaffoldError($method);\n\t}\n\n/**\n * Constructs the view class instance based on the controller property\n *\n * @return View\n */\n\tprotected function _getViewObject() {\n\t\t$viewClass = $this->viewClass;\n\t\tif ($this->viewClass !== 'View') {\n\t\t\tlist($plugin, $viewClass) = pluginSplit($viewClass, true);\n\t\t\t$viewClass = $viewClass . 'View';\n\t\t\tApp::uses($viewClass, $plugin . 'View');\n\t\t}\n\n\t\treturn new $viewClass($this);\n\t}\n\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":36778}]],"length":36778}
