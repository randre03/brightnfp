{"ts":1377222368344,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * Basic Cake functionality.\n *\n * Core functions for including other source files, loading models and so forth.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       Cake\n * @since         CakePHP(tm) v 0.2.9\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\n\n/**\n * Basic defines for timing functions.\n */\n\tdefine('SECOND', 1);\n\tdefine('MINUTE', 60);\n\tdefine('HOUR', 3600);\n\tdefine('DAY', 86400);\n\tdefine('WEEK', 604800);\n\tdefine('MONTH', 2592000);\n\tdefine('YEAR', 31536000);\n\nif (!function_exists('config')) {\n\n/**\n * Loads configuration files. Receives a set of configuration files\n * to load.\n * Example:\n *\n * `config('config1', 'config2');`\n *\n * @return boolean Success\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#config\n */\n\tfunction config() {\n\t\t$args = func_get_args();\n\t\t$count = count($args);\n\t\t$included = 0;\n\t\tforeach ($args as $arg) {\n\t\t\tif (file_exists(APP . 'Config' . DS . $arg . '.php')) {\n\t\t\t\tinclude_once APP . 'Config' . DS . $arg . '.php';\n\t\t\t\t$included++;\n\t\t\t}\n\t\t}\n\t\treturn $included === $count;\n\t}\n\n}\n\nif (!function_exists('debug')) {\n\n/**\n * Prints out debug information about given variable.\n *\n * Only runs if debug level is greater than zero.\n *\n * @param boolean $var Variable to show debug information for.\n * @param boolean $showHtml If set to true, the method prints the debug data in a browser-friendly way.\n * @param boolean $showFrom If set to true, the method prints from where the function was called.\n * @return void\n * @link http://book.cakephp.org/2.0/en/development/debugging.html#basic-debugging\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#debug\n */\n\tfunction debug($var, $showHtml = null, $showFrom = true) {\n\t\tif (Configure::read('debug') > 0) {\n\t\t\tApp::uses('Debugger', 'Utility');\n\t\t\t$file = '';\n\t\t\t$line = '';\n\t\t\t$lineInfo = '';\n\t\t\tif ($showFrom) {\n\t\t\t\t$trace = Debugger::trace(array('start' => 1, 'depth' => 2, 'format' => 'array'));\n\t\t\t\t$file = str_replace(array(CAKE_CORE_INCLUDE_PATH, ROOT), '', $trace[0]['file']);\n\t\t\t\t$line = $trace[0]['line'];\n\t\t\t}\n\t\t\t$html = <<<HTML\n<div class=\"cake-debug-output\">\n%s\n<pre class=\"cake-debug\">\n%s\n</pre>\n</div>\nHTML;\n\t\t\t$text = <<<TEXT\n%s\n########## DEBUG ##########\n%s\n###########################\nTEXT;\n\t\t\t$template = $html;\n\t\t\tif (php_sapi_name() === 'cli' || $showHtml === false) {\n\t\t\t\t$template = $text;\n\t\t\t\tif ($showFrom) {\n\t\t\t\t\t$lineInfo = sprintf('%s (line %s)', $file, $line);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($showHtml === null && $template !== $text) {\n\t\t\t\t$showHtml = true;\n\t\t\t}\n\t\t\t$var = Debugger::exportVar($var, 25);\n\t\t\tif ($showHtml) {\n\t\t\t\t$template = $html;\n\t\t\t\t$var = h($var);\n\t\t\t\tif ($showFrom) {\n\t\t\t\t\t$lineInfo = sprintf('<span><strong>%s</strong> (line <strong>%s</strong>)</span>', $file, $line);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf($template, $lineInfo, $var);\n\t\t}\n\t}\n\n}\n\nif (!function_exists('sortByKey')) {\n\n/**\n * Sorts given $array by key $sortby.\n *\n * @param array $array Array to sort\n * @param string $sortby Sort by this key\n * @param string $order Sort order asc/desc (ascending or descending).\n * @param integer $type Type of sorting to perform\n * @return mixed Sorted array\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#sortByKey\n */\n\tfunction sortByKey(&$array, $sortby, $order = 'asc', $type = SORT_NUMERIC) {\n\t\tif (!is_array($array)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tforeach ($array as $key => $val) {\n\t\t\t$sa[$key] = $val[$sortby];\n\t\t}\n\n\t\tif ($order === 'asc') {\n\t\t\tasort($sa, $type);\n\t\t} else {\n\t\t\tarsort($sa, $type);\n\t\t}\n\n\t\tforeach ($sa as $key => $val) {\n\t\t\t$out[] = $array[$key];\n\t\t}\n\t\treturn $out;\n\t}\n\n}\n\nif (!function_exists('h')) {\n\n/**\n * Convenience method for htmlspecialchars.\n *\n * @param string|array|object $text Text to wrap through htmlspecialchars. Also works with arrays, and objects.\n *    Arrays will be mapped and have all their elements escaped. Objects will be string cast if they\n *    implement a `__toString` method. Otherwise the class name will be used.\n * @param boolean $double Encode existing html entities\n * @param string $charset Character set to use when escaping. Defaults to config value in 'App.encoding' or 'UTF-8'\n * @return string Wrapped text\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#h\n */\n\tfunction h($text, $double = true, $charset = null) {\n\t\tif (is_array($text)) {\n\t\t\t$texts = array();\n\t\t\tforeach ($text as $k => $t) {\n\t\t\t\t$texts[$k] = h($t, $double, $charset);\n\t\t\t}\n\t\t\treturn $texts;\n\t\t} elseif (is_object($text)) {\n\t\t\tif (method_exists($text, '__toString')) {\n\t\t\t\t$text = (string)$text;\n\t\t\t} else {\n\t\t\t\t$text = '(object)' . get_class($text);\n\t\t\t}\n\t\t} elseif (is_bool($text)) {\n\t\t\treturn $text;\n\t\t}\n\n\t\tstatic $defaultCharset = false;\n\t\tif ($defaultCharset === false) {\n\t\t\t$defaultCharset = Configure::read('App.encoding');\n\t\t\tif ($defaultCharset === null) {\n\t\t\t\t$defaultCharset = 'UTF-8';\n\t\t\t}\n\t\t}\n\t\tif (is_string($double)) {\n\t\t\t$charset = $double;\n\t\t}\n\t\treturn htmlspecialchars($text, ENT_QUOTES, ($charset) ? $charset : $defaultCharset, $double);\n\t}\n\n}\n\nif (!function_exists('pluginSplit')) {\n\n/**\n * Splits a dot syntax plugin name into its plugin and classname.\n * If $name does not have a dot, then index 0 will be null.\n *\n * Commonly used like `list($plugin, $name) = pluginSplit($name);`\n *\n * @param string $name The name you want to plugin split.\n * @param boolean $dotAppend Set to true if you want the plugin to have a '.' appended to it.\n * @param string $plugin Optional default plugin to use if no plugin is found. Defaults to null.\n * @return array Array with 2 indexes. 0 => plugin name, 1 => classname\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#pluginSplit\n */\n\tfunction pluginSplit($name, $dotAppend = false, $plugin = null) {\n\t\tif (strpos($name, '.') !== false) {\n\t\t\t$parts = explode('.', $name, 2);\n\t\t\tif ($dotAppend) {\n\t\t\t\t$parts[0] .= '.';\n\t\t\t}\n\t\t\treturn $parts;\n\t\t}\n\t\treturn array($plugin, $name);\n\t}\n\n}\n\nif (!function_exists('pr')) {\n\n/**\n * Print_r convenience function, which prints out <PRE> tags around\n * the output of given array. Similar to debug().\n *\n * @see debug()\n * @param array $var Variable to print out\n * @return void\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#pr\n */\n\tfunction pr($var) {\n\t\tif (Configure::read('debug') > 0) {\n\t\t\techo '<pre>';\n\t\t\tprint_r($var);\n\t\t\techo '</pre>';\n\t\t}\n\t}\n\n}\n\nif (!function_exists('am')) {\n\n/**\n * Merge a group of arrays\n *\n * @param array First array\n * @param array Second array\n * @param array Third array\n * @param array Etc...\n * @return array All array parameters merged into one\n * @link http://book.cakephp.org/2.0/en/development/debugging.html#am\n */\n\tfunction am() {\n\t\t$r = array();\n\t\t$args = func_get_args();\n\t\tforeach ($args as $a) {\n\t\t\tif (!is_array($a)) {\n\t\t\t\t$a = array($a);\n\t\t\t}\n\t\t\t$r = array_merge($r, $a);\n\t\t}\n\t\treturn $r;\n\t}\n\n}\n\nif (!function_exists('env')) {\n\n/**\n * Gets an environment variable from available sources, and provides emulation\n * for unsupported or inconsistent environment variables (i.e. DOCUMENT_ROOT on\n * IIS, or SCRIPT_NAME in CGI mode). Also exposes some additional custom\n * environment information.\n *\n * @param string $key Environment variable name.\n * @return string Environment variable setting.\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#env\n */\n\tfunction env($key) {\n\t\tif ($key === 'HTTPS') {\n\t\t\tif (isset($_SERVER['HTTPS'])) {\n\t\t\t\treturn (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off');\n\t\t\t}\n\t\t\treturn (strpos(env('SCRIPT_URI'), 'https://') === 0);\n\t\t}\n\n\t\tif ($key === 'SCRIPT_NAME') {\n\t\t\tif (env('CGI_MODE') && isset($_ENV['SCRIPT_URL'])) {\n\t\t\t\t$key = 'SCRIPT_URL';\n\t\t\t}\n\t\t}\n\n\t\t$val = null;\n\t\tif (isset($_SERVER[$key])) {\n\t\t\t$val = $_SERVER[$key];\n\t\t} elseif (isset($_ENV[$key])) {\n\t\t\t$val = $_ENV[$key];\n\t\t} elseif (getenv($key) !== false) {\n\t\t\t$val = getenv($key);\n\t\t}\n\n\t\tif ($key === 'REMOTE_ADDR' && $val === env('SERVER_ADDR')) {\n\t\t\t$addr = env('HTTP_PC_REMOTE_ADDR');\n\t\t\tif ($addr !== null) {\n\t\t\t\t$val = $addr;\n\t\t\t}\n\t\t}\n\n\t\tif ($val !== null) {\n\t\t\treturn $val;\n\t\t}\n\n\t\tswitch ($key) {\n\t\t\tcase 'DOCUMENT_ROOT':\n\t\t\t\t$name = env('SCRIPT_NAME');\n\t\t\t\t$filename = env('SCRIPT_FILENAME');\n\t\t\t\t$offset = 0;\n\t\t\t\tif (!strpos($name, '.php')) {\n\t\t\t\t\t$offset = 4;\n\t\t\t\t}\n\t\t\t\treturn substr($filename, 0, -(strlen($name) + $offset));\n\t\t\tcase 'PHP_SELF':\n\t\t\t\treturn str_replace(env('DOCUMENT_ROOT'), '', env('SCRIPT_FILENAME'));\n\t\t\tcase 'CGI_MODE':\n\t\t\t\treturn (PHP_SAPI === 'cgi');\n\t\t\tcase 'HTTP_BASE':\n\t\t\t\t$host = env('HTTP_HOST');\n\t\t\t\t$parts = explode('.', $host);\n\t\t\t\t$count = count($parts);\n\n\t\t\t\tif ($count === 1) {\n\t\t\t\t\treturn '.' . $host;\n\t\t\t\t} elseif ($count === 2) {\n\t\t\t\t\treturn '.' . $host;\n\t\t\t\t} elseif ($count === 3) {\n\t\t\t\t\t$gTLD = array(\n\t\t\t\t\t\t'aero',\n\t\t\t\t\t\t'asia',\n\t\t\t\t\t\t'biz',\n\t\t\t\t\t\t'cat',\n\t\t\t\t\t\t'com',\n\t\t\t\t\t\t'coop',\n\t\t\t\t\t\t'edu',\n\t\t\t\t\t\t'gov',\n\t\t\t\t\t\t'info',\n\t\t\t\t\t\t'int',\n\t\t\t\t\t\t'jobs',\n\t\t\t\t\t\t'mil',\n\t\t\t\t\t\t'mobi',\n\t\t\t\t\t\t'museum',\n\t\t\t\t\t\t'name',\n\t\t\t\t\t\t'net',\n\t\t\t\t\t\t'org',\n\t\t\t\t\t\t'pro',\n\t\t\t\t\t\t'tel',\n\t\t\t\t\t\t'travel',\n\t\t\t\t\t\t'xxx'\n\t\t\t\t\t);\n\t\t\t\t\tif (in_array($parts[1], $gTLD)) {\n\t\t\t\t\t\treturn '.' . $host;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarray_shift($parts);\n\t\t\t\treturn '.' . implode('.', $parts);\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\nif (!function_exists('cache')) {\n\n/**\n * Reads/writes temporary data to cache files or session.\n *\n * @param string $path File path within /tmp to save the file.\n * @param mixed $data The data to save to the temporary file.\n * @param mixed $expires A valid strtotime string when the data expires.\n * @param string $target The target of the cached data; either 'cache' or 'public'.\n * @return mixed The contents of the temporary file.\n * @deprecated Please use Cache::write() instead\n */\n\tfunction cache($path, $data = null, $expires = '+1 day', $target = 'cache') {\n\t\tif (Configure::read('Cache.disable')) {\n\t\t\treturn null;\n\t\t}\n\t\t$now = time();\n\n\t\tif (!is_numeric($expires)) {\n\t\t\t$expires = strtotime($expires, $now);\n\t\t}\n\n\t\tswitch (strtolower($target)) {\n\t\t\tcase 'cache':\n\t\t\t\t$filename = CACHE . $path;\n\t\t\t\tbreak;\n\t\t\tcase 'public':\n\t\t\t\t$filename = WWW_ROOT . $path;\n\t\t\t\tbreak;\n\t\t\tcase 'tmp':\n\t\t\t\t$filename = TMP . $path;\n\t\t\t\tbreak;\n\t\t}\n\t\t$timediff = $expires - $now;\n\t\t$filetime = false;\n\n\t\tif (file_exists($filename)) {\n\t\t\t//@codingStandardsIgnoreStart\n\t\t\t$filetime = @filemtime($filename);\n\t\t\t//@codingStandardsIgnoreEnd\n\t\t}\n\n\t\tif ($data === null) {\n\t\t\tif (file_exists($filename) && $filetime !== false) {\n\t\t\t\tif ($filetime + $timediff < $now) {\n\t\t\t\t\t//@codingStandardsIgnoreStart\n\t\t\t\t\t@unlink($filename);\n\t\t\t\t\t//@codingStandardsIgnoreEnd\n\t\t\t\t} else {\n\t\t\t\t\t//@codingStandardsIgnoreStart\n\t\t\t\t\t$data = @file_get_contents($filename);\n\t\t\t\t\t//@codingStandardsIgnoreEnd\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (is_writable(dirname($filename))) {\n\t\t\t//@codingStandardsIgnoreStart\n\t\t\t@file_put_contents($filename, $data, LOCK_EX);\n\t\t\t//@codingStandardsIgnoreEnd\n\t\t}\n\t\treturn $data;\n\t}\n\n}\n\nif (!function_exists('clearCache')) {\n\n/**\n * Used to delete files in the cache directories, or clear contents of cache directories\n *\n * @param string|array $params As String name to be searched for deletion, if name is a directory all files in\n *   directory will be deleted. If array, names to be searched for deletion. If clearCache() without params,\n *   all files in app/tmp/cache/views will be deleted\n * @param string $type Directory in tmp/cache defaults to view directory\n * @param string $ext The file extension you are deleting\n * @return true if files found and deleted false otherwise\n */\n\tfunction clearCache($params = null, $type = 'views', $ext = '.php') {\n\t\tif (is_string($params) || $params === null) {\n\t\t\t$params = preg_replace('/\\/\\//', '/', $params);\n\t\t\t$cache = CACHE . $type . DS . $params;\n\n\t\t\tif (is_file($cache . $ext)) {\n\t\t\t\t//@codingStandardsIgnoreStart\n\t\t\t\t@unlink($cache . $ext);\n\t\t\t\t//@codingStandardsIgnoreEnd\n\t\t\t\treturn true;\n\t\t\t} elseif (is_dir($cache)) {\n\t\t\t\t$files = glob($cache . '*');\n\n\t\t\t\tif ($files === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tforeach ($files as $file) {\n\t\t\t\t\tif (is_file($file) && strrpos($file, DS . 'empty') !== strlen($file) - 6) {\n\t\t\t\t\t\t//@codingStandardsIgnoreStart\n\t\t\t\t\t\t@unlink($file);\n\t\t\t\t\t\t//@codingStandardsIgnoreEnd\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t$cache = array(\n\t\t\t\tCACHE . $type . DS . '*' . $params . $ext,\n\t\t\t\tCACHE . $type . DS . '*' . $params . '_*' . $ext\n\t\t\t);\n\t\t\t$files = array();\n\t\t\twhile ($search = array_shift($cache)) {\n\t\t\t\t$results = glob($search);\n\t\t\t\tif ($results !== false) {\n\t\t\t\t\t$files = array_merge($files, $results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (empty($files)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tforeach ($files as $file) {\n\t\t\t\tif (is_file($file) && strrpos($file, DS . 'empty') !== strlen($file) - 6) {\n\t\t\t\t\t//@codingStandardsIgnoreStart\n\t\t\t\t\t@unlink($file);\n\t\t\t\t\t//@codingStandardsIgnoreEnd\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\n\t\t} elseif (is_array($params)) {\n\t\t\tforeach ($params as $file) {\n\t\t\t\tclearCache($file, $type, $ext);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nif (!function_exists('stripslashes_deep')) {\n\n/**\n * Recursively strips slashes from all values in an array\n *\n * @param array $values Array of values to strip slashes\n * @return mixed What is returned from calling stripslashes\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#stripslashes_deep\n */\n\tfunction stripslashes_deep($values) {\n\t\tif (is_array($values)) {\n\t\t\tforeach ($values as $key => $value) {\n\t\t\t\t$values[$key] = stripslashes_deep($value);\n\t\t\t}\n\t\t} else {\n\t\t\t$values = stripslashes($values);\n\t\t}\n\t\treturn $values;\n\t}\n\n}\n\nif (!function_exists('__')) {\n\n/**\n * Returns a translated string if one is found; Otherwise, the submitted message.\n *\n * @param string $singular Text to translate\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return mixed translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__\n */\n\tfunction __($singular, $args = null) {\n\t\tif (!$singular) {\n\t\t\treturn;\n\t\t}\n\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($singular);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 1);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('__n')) {\n\n/**\n * Returns correct plural form of message identified by $singular and $plural for count $count.\n * Some languages have more than one form for plural messages dependent on the count.\n *\n * @param string $singular Singular text to translate\n * @param string $plural Plural text\n * @param integer $count Count\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return mixed plural form of translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__n\n */\n\tfunction __n($singular, $plural, $count, $args = null) {\n\t\tif (!$singular) {\n\t\t\treturn;\n\t\t}\n\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($singular, $plural, null, 6, $count);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 3);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('__d')) {\n\n/**\n * Allows you to override the current domain for a single message lookup.\n *\n * @param string $domain Domain\n * @param string $msg String to translate\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__d\n */\n\tfunction __d($domain, $msg, $args = null) {\n\t\tif (!$msg) {\n\t\t\treturn;\n\t\t}\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($msg, null, $domain);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 2);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('__dn')) {\n\n/**\n * Allows you to override the current domain for a single plural message lookup.\n * Returns correct plural form of message identified by $singular and $plural for count $count\n * from domain $domain.\n *\n * @param string $domain Domain\n * @param string $singular Singular string to translate\n * @param string $plural Plural\n * @param integer $count Count\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return plural form of translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__dn\n */\n\tfunction __dn($domain, $singular, $plural, $count, $args = null) {\n\t\tif (!$singular) {\n\t\t\treturn;\n\t\t}\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($singular, $plural, $domain, 6, $count);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 4);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('__dc')) {\n\n/**\n * Allows you to override the current domain for a single message lookup.\n * It also allows you to specify a category.\n *\n * The category argument allows a specific category of the locale settings to be used for fetching a message.\n * Valid categories are: LC_CTYPE, LC_NUMERIC, LC_TIME, LC_COLLATE, LC_MONETARY, LC_MESSAGES and LC_ALL.\n *\n * Note that the category must be specified with a numeric value, instead of the constant name. The values are:\n *\n * - LC_ALL       0\n * - LC_COLLATE   1\n * - LC_CTYPE     2\n * - LC_MONETARY  3\n * - LC_NUMERIC   4\n * - LC_TIME      5\n * - LC_MESSAGES  6\n *\n * @param string $domain Domain\n * @param string $msg Message to translate\n * @param integer $category Category\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__dc\n */\n\tfunction __dc($domain, $msg, $category, $args = null) {\n\t\tif (!$msg) {\n\t\t\treturn;\n\t\t}\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($msg, null, $domain, $category);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 3);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('__dcn')) {\n\n/**\n * Allows you to override the current domain for a single plural message lookup.\n * It also allows you to specify a category.\n * Returns correct plural form of message identified by $singular and $plural for count $count\n * from domain $domain.\n *\n * The category argument allows a specific category of the locale settings to be used for fetching a message.\n * Valid categories are: LC_CTYPE, LC_NUMERIC, LC_TIME, LC_COLLATE, LC_MONETARY, LC_MESSAGES and LC_ALL.\n *\n * Note that the category must be specified with a numeric value, instead of the constant name. The values are:\n *\n * - LC_ALL       0\n * - LC_COLLATE   1\n * - LC_CTYPE     2\n * - LC_MONETARY  3\n * - LC_NUMERIC   4\n * - LC_TIME      5\n * - LC_MESSAGES  6\n *\n * @param string $domain Domain\n * @param string $singular Singular string to translate\n * @param string $plural Plural\n * @param integer $count Count\n * @param integer $category Category\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return plural form of translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__dcn\n */\n\tfunction __dcn($domain, $singular, $plural, $count, $category, $args = null) {\n\t\tif (!$singular) {\n\t\t\treturn;\n\t\t}\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($singular, $plural, $domain, $category, $count);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 5);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('__c')) {\n\n/**\n * The category argument allows a specific category of the locale settings to be used for fetching a message.\n * Valid categories are: LC_CTYPE, LC_NUMERIC, LC_TIME, LC_COLLATE, LC_MONETARY, LC_MESSAGES and LC_ALL.\n *\n * Note that the category must be specified with a numeric value, instead of the constant name. The values are:\n *\n * - LC_ALL       0\n * - LC_COLLATE   1\n * - LC_CTYPE     2\n * - LC_MONETARY  3\n * - LC_NUMERIC   4\n * - LC_TIME      5\n * - LC_MESSAGES  6\n *\n * @param string $msg String to translate\n * @param integer $category Category\n * @param mixed $args Array with arguments or multiple arguments in function\n * @return translated string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__c\n */\n\tfunction __c($msg, $category, $args = null) {\n\t\tif (!$msg) {\n\t\t\treturn;\n\t\t}\n\t\tApp::uses('I18n', 'I18n');\n\t\t$translated = I18n::translate($msg, null, null, $category);\n\t\tif ($args === null) {\n\t\t\treturn $translated;\n\t\t} elseif (!is_array($args)) {\n\t\t\t$args = array_slice(func_get_args(), 2);\n\t\t}\n\t\treturn vsprintf($translated, $args);\n\t}\n\n}\n\nif (!function_exists('LogError')) {\n\n/**\n * Shortcut to Log::write.\n *\n * @param string $message Message to write to log\n * @return void\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#LogError\n */\n\tfunction LogError($message) {\n\t\tApp::uses('CakeLog', 'Log');\n\t\t$bad = array(\"\\n\", \"\\r\", \"\\t\");\n\t\t$good = ' ';\n\t\tCakeLog::write('error', str_replace($bad, $good, $message));\n\t}\n\n}\n\nif (!function_exists('fileExistsInPath')) {\n\n/**\n * Searches include path for files.\n *\n * @param string $file File to look for\n * @return Full path to file if exists, otherwise false\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#fileExistsInPath\n */\n\tfunction fileExistsInPath($file) {\n\t\t$paths = explode(PATH_SEPARATOR, ini_get('include_path'));\n\t\tforeach ($paths as $path) {\n\t\t\t$fullPath = $path . DS . $file;\n\n\t\t\tif (file_exists($fullPath)) {\n\t\t\t\treturn $fullPath;\n\t\t\t} elseif (file_exists($file)) {\n\t\t\t\treturn $file;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nif (!function_exists('convertSlash')) {\n\n/**\n * Convert forward slashes to underscores and removes first and last underscores in a string\n *\n * @param string String to convert\n * @return string with underscore remove from start and end of string\n * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#convertSlash\n */\n\tfunction convertSlash($string) {\n\t\t$string = trim($string, '/');\n\t\t$string = preg_replace('/\\/\\//', '/', $string);\n\t\t$string = str_replace('/', '_', $string);\n\t\treturn $string;\n\t}\n\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":23008}]],"length":23008}
