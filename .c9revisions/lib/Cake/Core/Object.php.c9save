{"ts":1377223728401,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       Cake.Core\n * @since         CakePHP(tm) v 0.2.9\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\n\nApp::uses('CakeLog', 'Log');\nApp::uses('Dispatcher', 'Routing');\nApp::uses('Set', 'Utility');\n\n/**\n * Object class provides a few generic methods used in several subclasses.\n *\n * Also includes methods for logging and the special method RequestAction,\n * to call other Controllers' Actions from anywhere.\n *\n * @package       Cake.Core\n */\nclass Object {\n\n/**\n * constructor, no-op\n *\n */\n\tpublic function __construct() {\n\t}\n\n/**\n * Object-to-string conversion.\n * Each class can override this method as necessary.\n *\n * @return string The name of this class\n */\n\tpublic function toString() {\n\t\t$class = get_class($this);\n\t\treturn $class;\n\t}\n\n/**\n * Calls a controller's method from any location. Can be used to connect controllers together\n * or tie plugins into a main application. requestAction can be used to return rendered views\n * or fetch the return value from controller actions.\n *\n * Under the hood this method uses Router::reverse() to convert the $url parameter into a string\n * URL. You should use URL formats that are compatible with Router::reverse()\n *\n * #### Passing POST and GET data\n *\n * POST and GET data can be simulated in requestAction. Use `$extra['url']` for\n * GET data. The `$extra['data']` parameter allows POST data simulation.\n *\n * @param string|array $url String or array-based URL. Unlike other URL arrays in CakePHP, this\n *    URL will not automatically handle passed and named arguments in the $url parameter.\n * @param array $extra if array includes the key \"return\" it sets the AutoRender to true. Can\n *    also be used to submit GET/POST data, and named/passed arguments.\n * @return mixed Boolean true or false on success/failure, or contents\n *    of rendered action if 'return' is set in $extra.\n */\n\tpublic function requestAction($url, $extra = array()) {\n\t\tif (empty($url)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (($index = array_search('return', $extra)) !== false) {\n\t\t\t$extra['return'] = 0;\n\t\t\t$extra['autoRender'] = 1;\n\t\t\tunset($extra[$index]);\n\t\t}\n\t\t$arrayUrl = is_array($url);\n\t\tif ($arrayUrl && !isset($extra['url'])) {\n\t\t\t$extra['url'] = array();\n\t\t}\n\t\tif ($arrayUrl && !isset($extra['data'])) {\n\t\t\t$extra['data'] = array();\n\t\t}\n\t\t$extra = array_merge(array('autoRender' => 0, 'return' => 1, 'bare' => 1, 'requested' => 1), $extra);\n\t\t$data = isset($extra['data']) ? $extra['data'] : null;\n\t\tunset($extra['data']);\n\n\t\tif (is_string($url) && strpos($url, FULL_BASE_URL) === 0) {\n\t\t\t$url = Router::normalize(str_replace(FULL_BASE_URL, '', $url));\n\t\t}\n\t\tif (is_string($url)) {\n\t\t\t$request = new CakeRequest($url);\n\t\t} elseif (is_array($url)) {\n\t\t\t$params = $url + array('pass' => array(), 'named' => array(), 'base' => false);\n\t\t\t$params = array_merge($params, $extra);\n\t\t\t$request = new CakeRequest(Router::reverse($params));\n\t\t}\n\t\tif (isset($data)) {\n\t\t\t$request->data = $data;\n\t\t}\n\n\t\t$dispatcher = new Dispatcher();\n\t\t$result = $dispatcher->dispatch($request, new CakeResponse(), $extra);\n\t\tRouter::popRequest();\n\t\treturn $result;\n\t}\n\n/**\n * Calls a method on this object with the given parameters. Provides an OO wrapper\n * for `call_user_func_array`\n *\n * @param string $method Name of the method to call\n * @param array $params Parameter list to use when calling $method\n * @return mixed Returns the result of the method call\n */\n\tpublic function dispatchMethod($method, $params = array()) {\n\t\tswitch (count($params)) {\n\t\t\tcase 0:\n\t\t\t\treturn $this->{$method}();\n\t\t\tcase 1:\n\t\t\t\treturn $this->{$method}($params[0]);\n\t\t\tcase 2:\n\t\t\t\treturn $this->{$method}($params[0], $params[1]);\n\t\t\tcase 3:\n\t\t\t\treturn $this->{$method}($params[0], $params[1], $params[2]);\n\t\t\tcase 4:\n\t\t\t\treturn $this->{$method}($params[0], $params[1], $params[2], $params[3]);\n\t\t\tcase 5:\n\t\t\t\treturn $this->{$method}($params[0], $params[1], $params[2], $params[3], $params[4]);\n\t\t\tdefault:\n\t\t\t\treturn call_user_func_array(array(&$this, $method), $params);\n\t\t}\n\t}\n\n/**\n * Stop execution of the current script. Wraps exit() making\n * testing easier.\n *\n * @param integer|string $status see http://php.net/exit for values\n * @return void\n */\n\tprotected function _stop($status = 0) {\n\t\texit($status);\n\t}\n\n/**\n * Convenience method to write a message to CakeLog. See CakeLog::write()\n * for more information on writing to logs.\n *\n * @param string $msg Log message.\n * @param integer|string $type Type of message being written. Either a valid\n *    LOG_* constant or a string matching the recognized levels.\n * @return boolean Success of log write.\n * @see CakeLog::write()\n */\n\tpublic function log($msg, $type = LOG_ERR) {\n\t\tif (!is_string($msg)) {\n\t\t\t$msg = print_r($msg, true);\n\t\t}\n\t\treturn CakeLog::write($type, $msg);\n\t}\n\n/**\n * Allows setting of multiple properties of the object in a single line of code. Will only set\n * properties that are part of a class declaration.\n *\n * @param array $properties An associative array containing properties and corresponding values.\n * @return void\n */\n\tprotected function _set($properties = array()) {\n\t\tif (is_array($properties) && !empty($properties)) {\n\t\t\t$vars = get_object_vars($this);\n\t\t\tforeach ($properties as $key => $val) {\n\t\t\t\tif (array_key_exists($key, $vars)) {\n\t\t\t\t\t$this->{$key} = $val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n/**\n * Merges this objects $property with the property in $class' definition.\n * This classes value for the property will be merged on top of $class'\n *\n * This provides some of the DRY magic CakePHP provides. If you want to shut it off, redefine\n * this method as an empty function.\n *\n * @param array $properties The name of the properties to merge.\n * @param string $class The class to merge the property with.\n * @param boolean $normalize Set to true to run the properties through Hash::normalize() before merging.\n * @return void\n */\n\tprotected function _mergeVars($properties, $class, $normalize = true) {\n\t\t$classProperties = get_class_vars($class);\n\t\tforeach ($properties as $var) {\n\t\t\tif (\n\t\t\t\tisset($classProperties[$var]) &&\n\t\t\t\t!empty($classProperties[$var]) &&\n\t\t\t\tis_array($this->{$var}) &&\n\t\t\t\t$this->{$var} != $classProperties[$var]\n\t\t\t) {\n\t\t\t\tif ($normalize) {\n\t\t\t\t\t$classProperties[$var] = Hash::normalize($classProperties[$var]);\n\t\t\t\t\t$this->{$var} = Hash::normalize($this->{$var});\n\t\t\t\t}\n\t\t\t\t$this->{$var} = Hash::merge($classProperties[$var], $this->{$var});\n\t\t\t}\n\t\t}\n\t}\n\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6902}]],"length":6902}
