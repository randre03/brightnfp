{"ts":1377218769542,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\r\nob_start();\r\n/**\r\n * This is core configuration file.\r\n *\r\n * Use it to configure core behavior of Cake.\r\n *\r\n * PHP versions 4 and 5\r\n *\r\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\r\n * Copyright 2005-2011, Cake Software Foundation, Inc. (http://cakefoundation.org)\r\n *\r\n * Licensed under The MIT License\r\n * Redistributions of files must retain the above copyright notice.\r\n *\r\n * @copyright     Copyright 2005-2011, Cake Software Foundation, Inc. (http://cakefoundation.org)\r\n * @link          http://cakephp.org CakePHP(tm) Project\r\n * @package       cake\r\n * @subpackage    cake.app.config\r\n * @since         CakePHP(tm) v 0.2.9\r\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n/**\r\n * CakePHP Debug Level:\r\n *\r\n * Production Mode:\r\n * \t0: No error messages, errors, or warnings shown. Flash messages redirect.\r\n *\r\n * Development Mode:\r\n * \t1: Errors and warnings shown, model caches refreshed, flash messages halted.\r\n * \t2: As in 1, but also with full debug messages and SQL output.\r\n *\r\n * In production mode, flash messages redirect after a time interval.\r\n * In development mode, you need to click the flash message to continue.\r\n */\r\n\tConfigure::write('debug', 2);\r\n\r\n/**\r\n * CakePHP Log Level:\r\n *\r\n * In case of Production Mode CakePHP gives you the possibility to continue logging errors.\r\n *\r\n * The following parameters can be used:\r\n *  Boolean: Set true/false to activate/deactivate logging\r\n *    Configure::write('log', true);\r\n *\r\n *  Integer: Use built-in PHP constants to set the error level (see error_reporting)\r\n *    Configure::write('log', E_ERROR | E_WARNING);\r\n *    Configure::write('log', E_ALL ^ E_NOTICE);\r\n */\r\n\tConfigure::write('log', true);\r\n\r\n/**\r\n * Application wide charset encoding\r\n */\r\n\tConfigure::write('App.encoding', 'UTF-8');\r\n\r\n/**\r\n * To configure CakePHP *not* to use mod_rewrite and to\r\n * use CakePHP pretty URLs, remove these .htaccess\r\n * files:\r\n *\r\n * /.htaccess\r\n * /app/.htaccess\r\n * /app/webroot/.htaccess\r\n *\r\n * And uncomment the App.baseUrl below:\r\n */\r\n\t//Configure::write('App.baseUrl', env('SCRIPT_NAME'));\r\n\r\n/**\r\n * Uncomment the define below to use CakePHP prefix routes.\r\n *\r\n * The value of the define determines the names of the routes\r\n * and their associated controller actions:\r\n *\r\n * Set to an array of prefixes you want to use in your application. Use for\r\n * admin or other prefixed routes.\r\n *\r\n * \tRouting.prefixes = array('admin', 'manager');\r\n *\r\n * Enables:\r\n *\t`admin_index()` and `/admin/controller/index`\r\n *\t`manager_index()` and `/manager/controller/index`\r\n *\r\n * [Note Routing.admin is deprecated in 1.3.  Use Routing.prefixes instead]\r\n */\r\n\tConfigure::write('Routing.prefixes', array('admin'));\r\n\r\n/**\r\n * Turn off all caching application-wide.\r\n *\r\n */\r\n\tConfigure::write('Cache.disable', true);\r\n\r\n/**\r\n * Enable cache checking.\r\n *\r\n * If set to true, for view caching you must still use the controller\r\n * var $cacheAction inside your controllers to define caching settings.\r\n * You can either set it controller-wide by setting var $cacheAction = true,\r\n * or in each action using $this->cacheAction = true.\r\n *\r\n */\r\n\t//Configure::write('Cache.check', true);\r\n\r\n/**\r\n * Defines the default error type when using the log() function. Used for\r\n * differentiating error logging and debugging. Currently PHP supports LOG_DEBUG.\r\n */\r\n\tdefine('LOG_ERROR', 2);\r\n\r\n/**\r\n * The preferred session handling method. Valid values:\r\n *\r\n * 'php'\t \t\tUses settings defined in your php.ini.\r\n * 'cake'\t\tSaves session files in CakePHP's /tmp directory.\r\n * 'database'\tUses CakePHP's database sessions.\r\n *\r\n * To define a custom session handler, save it at /app/config/<name>.php.\r\n * Set the value of 'Session.save' to <name> to utilize it in CakePHP.\r\n *\r\n * To use database sessions, run the app/config/schema/sessions.php schema using\r\n * the cake shell command: cake schema create Sessions\r\n *\r\n */\r\n\tConfigure::write('Session.save', 'php');\r\n\r\n/**\r\n * The model name to be used for the session model.\r\n *\r\n * 'Session.save' must be set to 'database' in order to utilize this constant.\r\n *\r\n * The model name set here should *not* be used elsewhere in your application.\r\n */\r\n\t//Configure::write('Session.model', 'Session');\r\n\r\n/**\r\n * The name of the table used to store CakePHP database sessions.\r\n *\r\n * 'Session.save' must be set to 'database' in order to utilize this constant.\r\n *\r\n * The table name set here should *not* include any table prefix defined elsewhere.\r\n *\r\n * Please note that if you set a value for Session.model (above), any value set for\r\n * Session.table will be ignored.\r\n *\r\n * [Note: Session.table is deprecated as of CakePHP 1.3]\r\n */\r\n\t//Configure::write('Session.table', 'cake_sessions');\r\n\r\n/**\r\n * The DATABASE_CONFIG::$var to use for database session handling.\r\n *\r\n * 'Session.save' must be set to 'database' in order to utilize this constant.\r\n */\r\n\t//Configure::write('Session.database', 'default');\r\n\r\n/**\r\n * The name of CakePHP's session cookie.\r\n *\r\n * Note the guidelines for Session names states: \"The session name references\r\n * the session id in cookies and URLs. It should contain only alphanumeric\r\n * characters.\"\r\n * @link http://php.net/session_name\r\n */\r\n\tConfigure::write('Session.cookie', 'CAKEPHP');\r\n\r\n/**\r\n * Session time out time (in seconds).\r\n * Actual value depends on 'Security.level' setting.\r\n */\r\n\tConfigure::write('Session.timeout', '120');\r\n\r\n/**\r\n * If set to false, sessions are not automatically started.\r\n */\r\n\tConfigure::write('Session.start', true);\r\n\r\n/**\r\n * When set to false, HTTP_USER_AGENT will not be checked\r\n * in the session. You might want to set the value to false, when dealing with\r\n * older versions of IE, Chrome Frame or certain web-browsing devices and AJAX\r\n */\r\n\tConfigure::write('Session.checkAgent', true);\r\n\r\n/**\r\n * The level of CakePHP security. The session timeout time defined\r\n * in 'Session.timeout' is multiplied according to the settings here.\r\n * Valid values:\r\n *\r\n * 'high'   Session timeout in 'Session.timeout' x 10\r\n * 'medium' Session timeout in 'Session.timeout' x 100\r\n * 'low'    Session timeout in 'Session.timeout' x 300\r\n *\r\n * CakePHP session IDs are also regenerated between requests if\r\n * 'Security.level' is set to 'high'.\r\n */\r\n\tConfigure::write('Security.level', 'medium');\r\n\r\n/**\r\n * A random string used in security hashing methods.\r\n */\r\n\tConfigure::write('Security.salt', 'badweefrg');\r\n\r\n/**\r\n * A random numeric string (digits only) used to encrypt/decrypt strings.\r\n */\r\n\tConfigure::write('Security.cipherSeed', '2345234234');\r\n\r\n/**\r\n * Apply timestamps with the last modified time to static assets (js, css, images).\r\n * Will append a querystring parameter containing the time the file was modified. This is\r\n * useful for invalidating browser caches.\r\n *\r\n * Set to `true` to apply timestamps when debug > 0. Set to 'force' to always enable\r\n * timestamping regardless of debug value.\r\n */\r\n\t//Configure::write('Asset.timestamp', true);\r\n/**\r\n * Compress CSS output by removing comments, whitespace, repeating tags, etc.\r\n * This requires a/var/cache directory to be writable by the web server for caching.\r\n * and /vendors/csspp/csspp.php\r\n *\r\n * To use, prefix the CSS link URL with '/ccss/' instead of '/css/' or use HtmlHelper::css().\r\n */\r\n\t//Configure::write('Asset.filter.css', 'css.php');\r\n\r\n/**\r\n * Plug in your own custom JavaScript compressor by dropping a script in your webroot to handle the\r\n * output, and setting the config below to the name of the script.\r\n *\r\n * To use, prefix your JavaScript link URLs with '/cjs/' instead of '/js/' or use JavaScriptHelper::link().\r\n */\r\n\t//Configure::write('Asset.filter.js', 'custom_javascript_output_filter.php');\r\n\r\n/**\r\n * The classname and database used in CakePHP's\r\n * access control lists.\r\n */\r\n\tConfigure::write('Acl.classname', 'DbAcl');\r\n\tConfigure::write('Acl.database', 'default');\r\n\r\n/**\r\n * If you are on PHP 5.3 uncomment this line and correct your server timezone\r\n * to fix the date & time related errors.\r\n */\r\n\tdate_default_timezone_set('America/Chicago');\r\n\r\n/**\r\n *\r\n * Cache Engine Configuration\r\n * Default settings provided below\r\n *\r\n * File storage engine.\r\n *\r\n * \t Cache::config('default', array(\r\n *\t\t'engine' => 'File', //[required]\r\n *\t\t'duration'=> 3600, //[optional]\r\n *\t\t'probability'=> 100, //[optional]\r\n * \t\t'path' => CACHE, //[optional] use system tmp directory - remember to use absolute path\r\n * \t\t'prefix' => 'cake_', //[optional]  prefix every cache file with this string\r\n * \t\t'lock' => false, //[optional]  use file locking\r\n * \t\t'serialize' => true, [optional]\r\n *\t));\r\n *\r\n *\r\n * APC (http://pecl.php.net/package/APC)\r\n *\r\n * \t Cache::config('default', array(\r\n *\t\t'engine' => 'Apc', //[required]\r\n *\t\t'duration'=> 3600, //[optional]\r\n *\t\t'probability'=> 100, //[optional]\r\n * \t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string\r\n *\t));\r\n *\r\n * Xcache (http://xcache.lighttpd.net/)\r\n *\r\n * \t Cache::config('default', array(\r\n *\t\t'engine' => 'Xcache', //[required]\r\n *\t\t'duration'=> 3600, //[optional]\r\n *\t\t'probability'=> 100, //[optional]\r\n * \t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional] prefix every cache file with this string\r\n *\t\t'user' => 'user', //user from xcache.admin.user settings\r\n *      'password' => 'password', //plaintext password (xcache.admin.pass)\r\n *\t));\r\n *\r\n *\r\n * Memcache (http://www.danga.com/memcached/)\r\n *\r\n * \t Cache::config('default', array(\r\n *\t\t'engine' => 'Memcache', //[required]\r\n *\t\t'duration'=> 3600, //[optional]\r\n *\t\t'probability'=> 100, //[optional]\r\n * \t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string\r\n * \t\t'servers' => array(\r\n * \t\t\t'127.0.0.1:11211' // localhost, default port 11211\r\n * \t\t), //[optional]\r\n * \t\t'compress' => false, // [optional] compress data in Memcache (slower, but uses less memory)\r\n * \t\t'persistent' => true, // [optional] set this to false for non-persistent connections\r\n *\t));\r\n *\r\n */\r\n\tCache::config('default', array('engine' => 'File'));\r\n\t/*\r\n\tConstants\r\n\t*/\r\n\tConfigure::write('adminDateFormat', 'd/m/Y');\r\n\tdefine('ADMIN_EMAIL','testing.sdei@gmail.com');\r\n\tdefine('ADMIN_FROM_NAME','Admin');\r\n\tdefine('thumbWidth',100);\r\n\tdefine('thumbHeight',100);\r\n\tConfigure::write('npoDateFormat', 'm-d-Y');\r\n\tConfigure::write('npoDirectory', 'uploads/npo/');\r\n\tConfigure::write('siteDirectory', 'sites/');\r\n\tConfigure::write('npoEventDirectory', 'uploads/npo/{id}/events');\r\n\tConfigure::write('npoNewsDirectory', 'uploads/npo/{id}/news');\r\n\tConfigure::write('npoImageDirectory', 'uploads/npo/{id}/images');\r\n\tConfigure::write('npoTimeFormat', 'H:i A');\r\n\tConfigure::write('MYSQL_DATE_FORMAT', 'Y-m-d');\r\n\tConfigure::write('MYSQL_TIME_FORMAT', 'H:i:s');\r\n\tConfigure::write('userDateFormat', 'd-m-Y');\r\n\tConfigure::write('CHURCH_IMAGE_PATH', '/img/church/');\r\n\tConfigure::write('SITE_URL', 'http://'.$_SERVER['HTTP_HOST'].'/');\r\n\tConfigure::write('NPO_IMAGE_URL', 'http://'.$_SERVER['HTTP_HOST'].'/img/church/');\r\n\tConfigure::write('CHURCH_THUMB_URL','http://'.$_SERVER['HTTP_HOST'].'/img/church/thumb/');\r\n\tConfigure::write('CHURCH_EVENT_URL','http://'.$_SERVER['HTTP_HOST'].'/uploads/npo/{id}/events/');\r\n\tConfigure::write('CHURCH_NEWS_URL','http://'.$_SERVER['HTTP_HOST'].'/uploads/npo/{id}/news/');\r\n\tConfigure::write('CHURCH_IMAGE_URL','http://'.$_SERVER['HTTP_HOST'].'/uploads/npo/{id}/images/');\r\n\tConfigure::write('CHURCH_EVENT_THUMB_URL','http://'.$_SERVER['HTTP_HOST'].'/uploads/npo/{id}/events/thumbs/');\r\n\tConfigure::write('SITE_TEMPLATE_ROOT', 'templates/');\r\n    \r\n    Configure::write('Error', array(\r\n    'handler' => 'ErrorHandler::handleError',\r\n    'level' => E_ALL & ~E_DEPRECATED,\r\n    'trace' => true\r\n    ));\r\n    \r\n    Configure::write('Error.handler', 'AppError::handleError');\r\n"]],"start1":0,"start2":0,"length1":0,"length2":11874}]],"length":11874}
{"contributors":[],"silentsave":false,"ts":1377218790148,"patch":[[{"diffs":[[0,"\n    ));\r\n    \r\n"],[1,"    Configure::write('Exception', array(\r\n    'handler' => 'ErrorHandler::handleException',\r\n    'log' => true\r\n))\r\n    \r\n"],[0,"    Configure::w"]],"start1":11793,"start2":11793,"length1":32,"length2":154}]],"length":11996,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377218817679,"patch":[[{"diffs":[[0,"> true\r\n"],[1,"    "],[0,"))"],[1,";"],[0,"\r\n    \r\n"]],"start1":11913,"start2":11913,"length1":18,"length2":23}]],"length":12001,"saved":false}
