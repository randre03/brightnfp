{"ts":1377220763919,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\r\nApp::uses('Core', 'Controller');\r\nclass AppController extends Controller{\r\n\t\r\n\tvar $components = array('Session','RequestHandler');\r\n\tvar $helpers =  array('Text','Html', 'Form','Ajax','Javascript','Session','PaypalIpn.Paypal');\r\n  /*\r\n    Before filter\r\n  */\r\n  function beforeFilter(){\r\n    App::import('Model','Fee');\r\n    $this->Fee = new Fee();\r\n    $fee = $this->Fee->find('first',array('fields'=>array('Fee.amount')));\r\n    $this->set('fee',$fee['Fee']['amount']); \r\n    $options = array('10'=>'10','20'=>'20','50'=>'50','100'=>'100');\r\n    $this->set('options',$options);\r\n\t\t$admin_user_id = $this->Session->read('SESSION_ADMIN.id');\r\n\t\tif(isset($admin_user_id)){\r\n        App::import('Model','Message');\r\n        $this->Message = new Message();\r\n        $unreadCount = $this->Message->find('count',array('conditions'=>array('Message.reciever_id'=>$admin_user_id,'Message.sender'=>'NPO','Message.read'=>'No','Message.admin_deleted'=>'No')));\r\n    \t\t$this->set('unreadCount',$unreadCount);\r\n\t\t}\r\n\t\t$npo_id =  $this->Session->read('SESSION_USER.Npo.id');\r\n\t\tif(isset($npo_id)){\r\n        App::import('Model','Message');\r\n        $this->Message = new Message();\r\n        $innerUnreadCount = $this->Message->find('count',array('conditions'=>array('Message.reciever_id'=>$npo_id,'Message.sender'=>'Admin','Message.read'=>'No','Message.npo_deleted'=>'No')));\r\n    \t\t\r\n        $this->set('innerUnreadCount',$innerUnreadCount);\r\n\t\t}\r\n    $this->set('admin_user_id',$admin_user_id);\r\n    if(isset($this->request->params['prefix']) && $this->request->params['prefix'] !==''){\r\n      if($this->request->params['prefix'] === 'admin'){\r\n        $this->layout = 'layout_admin';\r\n      }\r\n      if(isset($this->request->params['prefix']) && $this->request->params['prefix'] !=='' && $this->request->params['action'] !=='admin_login' && $this->request->params['action'] !=='admin_forgotpassword'){\r\n        $this->checkSession('Admin');\r\n      }\r\n    }else{\r\n        $this->layout = 'home_page';\r\n    }\r\n  }//ef\r\n    /**\r\n\t* @Date: October 18, 2011\r\n\t* @Method : checkSession\r\n\t* @Purpose: This function is to check session of user/admin.\r\n\t* @Param: $type\r\n\t* @Return: none \r\n\t**/\r\n  function checkSession($type){\r\n    if($type === 'Admin'){\r\n\t\t  $admin_user = $this->Session->read('SESSION_ADMIN');\r\n      if(empty($admin_user)){\r\n        $this->Session->setFlash('<div class=\"fail\">'.__('PLEASE_LOGIN_FIRST').'</div>');\r\n        $this->redirect(array('controller'=>'admin','action'=>'admin_login'));\r\n      }\r\n    }elseif($type === 'Npo'){\r\n      $npoData = $this->Session->read('SESSION_USER.Npo');\r\n      if(empty($npoData)){\r\n        $this->Session->setFlash('<div class=\"fail\">'.__('PLEASE_LOGIN_FIRST').'</div>');\r\n        $this->redirect('/');\r\n      }\r\n    }elseif($type === 'Member'){\r\n      $memberData =  $this->Session->read('SESSION_USER.Member');\r\n      if(empty($memberData)){\r\n        $this->Session->setFlash('<div class=\"fail\">'.__('PLEASE_LOGIN_FIRST').'</div>');\r\n        $this->redirect('/');\r\n      }\r\n    }\r\n  }//ef\r\n    /**\r\n\t* @Date: Nov 03, 2011\r\n\t* @Method : afterPaypalNotification\r\n\t* @Purpose: This function is to handle the post effects of a transaction.\r\n\t* @Param: $type\r\n\t* @Return: none \r\n\t**/\r\n  function afterPaypalNotification($txnId){\r\n    //Here is where you can implement code to apply the transaction to your app.\r\n    //for example, you could now mark an order as paid, a subscription, or give the user premium access.\r\n    //retrieve the transaction using the txnId passed and apply whatever logic your site needs.\r\n    \r\n    $transaction = ClassRegistry::init('PaypalIpn.InstantPaymentNotification')->findById($txnId);\r\n    $this->log($transaction['InstantPaymentNotification']['id'], 'paypal');\r\n\r\n    //Tip: be sure to check the payment_status is complete because failure transactions \r\n    //     are also saved to your database for review.\r\n\r\n    if($transaction['InstantPaymentNotification']['payment_status'] == 'Completed'){\r\n      echo 'TXN Successfull';\r\n      //Yay!  We have monies!\r\n    } else {\r\n     echo 'TXN Failed';\r\n      //Oh no, better look at this transaction to determine what to do; like email a decline letter.\r\n    }\r\n  } \r\n  /**\r\n\t* @Date: Nov 15, 2011\r\n\t* @Method : checkSubscription\r\n\t* @Purpose: This function is to check if email is subscribed.\r\n\t* @Param: $value\r\n\t* @Return: none \r\n\t**/\r\n  function checkSubscription($value){\r\n    App::import('Model','Subscriber');\r\n    $this->Subscriber = new Subscriber();\r\n    $count = $this->Subscriber->find('count',array('conditions'=>array('Subscriber.email_id'=>$value)));\r\n    if($count < 1){\r\n      echo 'Not'; exit;\r\n    }  \r\n  }//ef\r\n  \r\n  /**\r\n\t* @Date: Nov 15, 2011\r\n\t* @Method : chkSubscribed\r\n\t* @Purpose: This function is to check if email is subscribed.\r\n\t* @Param: $value\r\n\t* @Return: none \r\n\t**/\r\n\tfunction chkSubscribed($value){\r\n    App::import('Model','Subscriber');\r\n    $this->Subscriber = new Subscriber();\r\n    $count = $this->Subscriber->find('count',array('conditions'=>array('Subscriber.email_id'=>$value)));\r\n    if($count == 1){\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }  \r\n  \r\n  }//ef\r\n    /**\r\n\t* @Date: Nov 15, 2011\r\n\t* @Method : chkDuplicate\r\n\t* @Purpose: This function is to check duplicate values for ajax call.\r\n\t* @Param: $type\r\n\t* @Return: none \r\n\t**/\r\n  function chkDuplicate(){\r\n    $value = trim($this->request->params['url']['value']); \r\n    $field = trim($this->request->params['url']['field']); \r\n    $model = $this->request->params['url']['model'];\r\n    if($field == 'email' && $model =='Npo'){\r\n      $this->checkSubscription($value);\r\n    }\r\n    App::import('Model',$model);\r\n    $this->$model = new $model();\r\n    $result = $this->$model->find('count',array('conditions'=>array(\"$model.$field\" =>$value)));\r\n    if($result === 0){\r\n      echo 'ok';\r\n    }else{\r\n      echo 'exists';\r\n    }\r\n    exit;\r\n  }//ef \r\n  \r\n  \r\n    /**\r\n\t* @Date: Nov 15, 2011\r\n\t* @Method : chkDuplicateFields\r\n\t* @Purpose: This function is to check duplicate values for server side.\r\n\t* @Param: $type\r\n\t* @Return: none \r\n\t**/\r\n  function chkDuplicateFields($value,$field,$model){\r\n    App::import('Model',$model);\r\n    $this->$model = new $model();\r\n    $result = $this->$model->find('count',array('conditions'=>array(\"$model.$field\" =>$value)));\r\n    if($result === 0){\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }\r\n    exit;\r\n  }//ef \r\n  \r\n  \r\n  \r\n  \r\n    /**\r\n\t* @Date: November 23, 2011\r\n\t* @Method : has_site\r\n\t* @Purpose: This function is to check site of user.\r\n\t* @Param: $user\r\n\t* @Return: none \r\n\t**/\r\n  function has_site($user){\r\n    App::import('Model','NpoTemplate');\r\n    $this->NpoTemplate = new NpoTemplate();\r\n\t\t$this->Npo->recursive = 3;\r\n    $this->NpoTemplate->bindmodel(\r\n\t\t              array(\r\n\t\t                'belongsTo'=>array(\r\n                      'TemplateTheme' =>array(\r\n                          'className'=>'TemplateTheme',\r\n                          'fields'   =>'TemplateTheme.html,TemplateTheme.layout_name,TemplateTheme.name'\r\n                      ),\r\n                      'Npo' =>array(\r\n                          'className'=>'Npo',\r\n                          'fields'   =>'Npo.id'\r\n                      )\r\n                      \r\n                    ),\r\n                    'hasOne'=>array(\r\n                        'NpoContent'=>array(\r\n                          'className'=>'NpoContent',\r\n                          'foreignKey'=>false,\r\n                          'conditions'=>array('NpoContent.npo_id = NpoTemplate.npo_id')\r\n                        )\r\n                    )\r\n                  ),false\r\n                );\r\n    $arrUserSite = $this->NpoTemplate->find('first',array('conditions'=>array('Npo.address'=>$user)));\r\n    //pr($arrUserSite);die();\r\n    if(isset($arrUserSite) && !empty($arrUserSite)){\r\n      return $arrUserSite;\r\n    }else{\r\n      return false;\r\n    }      \r\n  }//ef\r\n  \r\n    /**\r\n\t* @Date: December 28, 2011\r\n\t* @Method : generateMenu\r\n\t* @Purpose: This function is to generate Site Menu.\r\n\t* @Param: $user\r\n\t* @Return: none \r\n\t**/\r\n  function generateMenu($user){\r\n      $menu = '<li><a href=\"/site/events/'.$user.'\">Events</li><li><a href=\"/site/news/'.$user.'\">News</a></li>';\r\n      return $menu;\r\n  }\r\n  \r\n    /**\r\n\t* @Date: December 28, 2011\r\n\t* @Method : getCaptcha\r\n\t* @Purpose: This function is to set captcha.\r\n\t* @Param: $user\r\n\t* @Return: none \r\n\t**/\r\n\tfunction captcha(){\r\n\t    $this->autoRender = false;\r\n      $aResponse['error'] = false;\r\n      $this->Session->write('iQaptcha',false);\t\r\n      \t\r\n      if(isset($_POST['action']))\r\n      {\r\n      \tif(htmlentities($_POST['action'], ENT_QUOTES, 'UTF-8') == 'qaptcha')\r\n      \t{\r\n          $this->Session->write('iQaptcha',true);\r\n          $session = \t$this->Session->read('iQaptcha');\r\n      \t\tif($session){\r\n      \t\t\techo json_encode($aResponse);\r\n      \t\t}else\r\n      \t\t{\r\n      \t\t\t$aResponse['error'] = true;\r\n      \t\t\techo json_encode($aResponse);\r\n      \t\t}\r\n      \t}\r\n      \telse\r\n      \t{\r\n      \t\t$aResponse['error'] = true;\r\n      \t\techo json_encode($aResponse);\r\n      \t}\r\n      }\r\n      else\r\n      {\r\n      \t$aResponse['error'] = true;\r\n      \techo json_encode($aResponse);\r\n      }\r\n  }//ef\r\n  \r\n  \r\n}//ec"]],"start1":0,"start2":0,"length1":0,"length2":9232}]],"length":9232}
{"contributors":[],"silentsave":false,"ts":1377220677766,"patch":[[{"diffs":[[0,"m','"],[-1,"Ajax','"],[0,"Java"]],"start1":182,"start2":182,"length1":15,"length2":8}]],"length":9225,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377221311584,"patch":[[{"diffs":[[0,"m','"],[-1,"Ajax','Javascript','"],[0,"Sess"]],"start1":182,"start2":182,"length1":28,"length2":8}]],"length":9212,"saved":false}
